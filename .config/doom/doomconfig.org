#+TITLE: Takoda's Config for Doom Emacs
#+STARTUP: overview

* Installation
Doom emacs can be installed from [[https://github.com/hlissner/doom-emacs][this link.]] This config can be installed via
#+BEGIN_SRC bash
mv ~/.doom.d ~/.doom.d.bak
git clone https://github.com/tj2ow/dotfiles ~/Downloads/dotfiles
mv ~/Downloads/dotfiles/.config/doom ~/.config/doom
#+END_SRC
Install mpd, mpc, pass, mu, isync, xclip
* User Info
NOTE This information about me change this to your info please.
#+BEGIN_SRC elisp
(setq user-full-name "Takoda J Horton")
(setq user-mail-address "tjhorton04@gmail.com")
#+END_SRC
* Ui
These are rather simple changes to the UI, and self-explanitory. Symon is the one that I go back and forth on wether or not to keep.
** theme
#+BEGIN_SRC elisp
(setq doom-theme 'doom-material)
#+END_SRC
** font
#+BEGIN_SRC elisp
(setq doom-font (font-spec :family "Source Code Pro" :size 15))
#+END_SRC
** clock
#+BEGIN_SRC elisp
(display-time-mode 1)
#+END_SRC
** relative line numbers
#+BEGIN_SRC elisp
(setq display-line-numbers-type 'relative)
#+END_SRC
** Symon
#+BEGIN_SRC elisp
(use-package symon
  :init (symon-mode)
  :config
  (map! :n "Z s" #'symon-mode))
#+END_SRC
* Lang
** javascript
Enable the javascript module in your doom! block for this to work correctly.
Install node.js, npm, and npx
#+BEGIN_SRC bash
sudo pacman -S node npm
npm i -g typescript
npm i -g prettier
#+END_SRC

#+BEGIN_SRC elisp
(use-package prettier-js
  :hook (js2-mode . prettier-js-mode)
  :config
  (setq prettier-js-args '(
                           "--trailing-comma" "all"
                           "--bracket-spacing" "true")))
#+END_SRC
** html
#+BEGIN_SRC elisp
(use-package emmet-mode
  :hook (mhtml-mode . emmet-mode) ;; when you load a html file emmet will load with it
  :config
  (map! :ie "C-h" #'emmet-expand-line)) ;; this will make emmet do its thing.
#+END_SRC
* Snippets
Enable :editor snippets module in your doom! block for this to work.
#+BEGIN_SRC elisp
(use-package doom-snippets
  :load-path "~/.config/doom/snippets"
  :after yasnippet)
#+END_SRC
* Org
** hl-todo hook
#+BEGIN_SRC elisp
(add-hook! org-mode 'hl-todo-mode)
#+END_SRC
** org-src QOL changes
Make org-src-editing much better
#+BEGIN_SRC elisp
(setq org-src-ask-before-returning-to-edit-buffer 'nil)

(map! :map emacs-lisp-mode-map
      :prefix "Z "
      :n "'" #'org-edit-src-exit
      :n "=" #'org-edit-src-abort)
#+END_SRC

* Password
Install pass on the system for this to work and module
#+BEGIN_SRC bash
sudo pacman -S pass
#+END_SRC
** keybinds
For normal-state
#+BEGIN_SRC elisp
(map! :prefix ("SPC z" . "password")
 :n "c" #'password-store-copy ;; Copy password to clipboard
 :n "e" #'password-store-edit ;; Edit Password in emacs
 :n "i" #'password-store-insert ;; create password for existing account.
 :n "g" #'password-store-generate ;; Generates random encrypted password!
 :n "R" #'password-store-remove ;; NOTE This will delete your password USE WITH CAUTION!
 :n "C" #'password-store-clear) ;; Clear the copied password from the kill-ring(clipboard).
#+END_SRC
** alt-keybinds
for insert/emacs-state and for EXWM modes
#+BEGIN_SRC elisp
(map! :prefix ((concat doom-leader-alt-key " z ") . "password")
 :ie "c" #'password-store-copy ;; Copy password to clipboard
 :ie "e" #'password-store-edit ;; Edit Password in emacs
 :ie "i" #'password-store-insert ;; create password for existing account.
 :ie "g" #'password-store-generate ;; Generates random encrypted password!
 :ie "R" #'password-store-remove ;; NOTE This will delete your password USE WITH CAUTION!
 :ie "C" #'password-store-clear) ;; Clear the copied password from the kill-ring(clipboard).
#+END_SRC
* Term
** key
#+BEGIN_SRC elisp
(map! "s-M-x" #'ansi-term)
#+END_SRC
** QOL
Stops asking for shell in ansi-term
#+BEGIN_SRC elisp
(defvar my-term-shell "/bin/zsh")
(defadvice ansi-term (before force-bash)
  (interactive (list my-term-shell)))
(ad-activate 'ansi-term)
#+END_SRC
* Avy
** QOL
All windows are effected by avy.
#+BEGIN_SRC elisp
(setq avy-all-windows-alt 't)
#+END_SRC
* Mu4e
Enable mu4e module. [[file:~/.emacs.d/modules/email/mu4e/README.org][Instrucions for setting mu4e up.]]
** Main gmail account
*** IMAP
For reciving Email
#+BEGIN_SRC elisp
;; Each path is relative to `+mu4e-mu4e-mail-path', which is ~/.mail by default
(set-email-account! "tjhorton04@gmail.com"
  '((mu4e-sent-folder       . "/Sent")
    (mu4e-drafts-folder     . "/Drafts")
    (mu4e-trash-folder      . "/Trash")
    (mu4e-refile-folder     . "/All Mail")
    (smtpmail-smtp-user     . "tjhorton04@gmail.com")
    (mu4e-compose-signature . "---\nTakoda Horton"))
  t)

#+END_SRC
*** SMTP
For Sending Mail
#+BEGIN_SRC elisp
;; I have my "default" parameters from Gmail
(setq mu4e-sent-folder "/home/takoda/.mail/gmail/Sent"
      ;; mu4e-sent-messages-behavior 'delete ;; Unsure how this should be configured
      mu4e-drafts-folder "/home/takoda/.mail/gmail/Drafts"
      user-mail-address "tjhorton04@gmail.com"
      smtpmail-default-smtp-server "smtp.gmail.com"
      smtpmail-smtp-server "smtp.gmail.com"
      smtpmail-smtp-service 587)
#+END_SRC

* Engine-mode
Hightlight something and search for it.
** duckduckgo
Enter visual-state then press =SPC / d= to search duckduckgo for it.
#+BEGIN_SRC elisp
(defengine duckduckgo
  "https://duckduckgo.com/?q=%s")
(map! :prefix "SPC / "
      :nv "d" #'engine/search-duckduckgo)
#+END_SRC
* RSS Feed
Need to learn/use this more
#+BEGIN_SRC elisp
(custom-set-variables
 ;; custom-set-variables was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(elfeed-feeds
   (quote
    ("https://www.archlinux.org/feeds/packages/x86_64/"))))
(custom-set-faces
 ;; custom-set-faces was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 )
#+END_SRC

* Calendar
Enable the calander module.
#+BEGIN_SRC elisp
(map! :n "SPC o c" #'calendar)
(map! :ie "M-SPC o c" #'calendar)
#+END_SRC

* Window Manager
** exwm
#+BEGIN_SRC elisp
;; Load EXWM.
(require 'exwm)

;; Set the initial number of workspaces (they can also be created later).
(setq exwm-workspace-number 10)

;; All buffers created in EXWM mode are named "*EXWM*". You may want to
;; change it in `exwm-update-class-hook' and `exwm-update-title-hook', which
;; are run when a new X window class name or title is available.  Here's
;; some advice on this topic:
;; + Always use `exwm-workspace-rename-buffer` to avoid naming conflict.
;; + For applications with multiple windows (e.g. GIMP), the class names of
;    all windows are probably the same.  Using window titles for them makes
;;   more sense.
;; In the following example, we use class names for all windows except for
;; Java applications and GIMP.
(add-hook 'exwm-update-class-hook
          (lambda ()
            (unless (or (string-prefix-p "sun-awt-X11-" exwm-instance-name)
                        (string= "gimp" exwm-instance-name))
              (exwm-workspace-rename-buffer exwm-class-name))))
(add-hook 'exwm-update-title-hook
          (lambda ()
            (when (or (not exwm-instance-name)
                      (string-prefix-p "sun-awt-X11-" exwm-instance-name)
                      (string= "gimp" exwm-instance-name))
              (exwm-workspace-rename-buffer exwm-title))))

    ;; this is a way to declare truly global/always working keybindings
    ;; this is a nifty way to go back from char mode to line mode without using the mouse
    (exwm-input-set-key (kbd "s-r") #'exwm-reset)
    (exwm-input-set-key (kbd "s-k") #'exwm-workspace-delete)
    (exwm-input-set-key (kbd "s-w") #'exwm-workspace-swap)

    ;; the next loop will bind s-<number> to switch to the corresponding workspace
    (dotimes (i 10)
      (exwm-input-set-key (kbd (format "s-%d" i))
                          `(lambda ()
                             (interactive)
                             (exwm-workspace-switch-create ,i))))

    ;; the simplest launcher, I keep it in only if dmenu eventually stopped working or something
    (exwm-input-set-key (kbd "s-&")
                        (lambda (command)
                          (interactive (list (read-shell-command "$ ")))
                          (start-process-shell-command command nil command)))

;; To add a key binding only available in line-mode, simply define it in
;; `exwm-mode-map'.  The following example shortens 'C-c q' to 'C-q'.
(define-key exwm-mode-map [?\C-q] #'exwm-input-send-next-key)

;; The following example demonstrates how to use simulation keys to mimic
;; the behavior of Emacs.  The value of `exwm-input-simulation-keys` is a
;; list of cons cells (SRC . DEST), where SRC is the key sequence you press
;; and DEST is what EXWM actually sends to application.  Note that both SRC
;; and DEST should be key sequences (vector or string).
(setq exwm-input-simulation-keys
      '(
        ;; movement
        ([?\C-h] . [left])
        ([?\M-b] . [C-left])
        ([?\C-l] . [right])
        ([?\M-f] . [C-right])
        ([?\C-k] . [up])
        ([?\C-j] . [down])
        ([?\C-0] . [home])
        ([?\C-$] . [end])
        ([?\M-v] . [prior])
        ([?\C-v] . [next])
        ([?\C-d] . [delete])
        ;; cut/paste.
        ([?\M-d] . [?\C-x])
        ([?\M-y] . [?\C-c])
        ([?\M-p] . [?\C-v])
        ;; search
        ([?\C-s] . [?\C-f])))

;; You can hide the minibuffer and echo area when they're not used, by
;; uncommenting the following line.
;(setq exwm-workspace-minibuffer-position 'bottom)

;; Do not forget to enable EXWM. It will start by itself when things are
;; ready.  You can put it _anywhere_ in your configuration.
(exwm-enable)


#+END_SRC
** Programs
Use this way to make keybinds I know it's annoying, but it works
#+BEGIN_SRC elisp
(defun exwm/run-program (name)
  (interactive)
  (start-process name nil name))

(defun takoda/launch-browser ()
  (interactive)
  (exwm/run-program "firefox"))

(defun takoda/launch-games ()
  (interactive)
  (exwm/run-program "lutris"))

(defun takoda/launch-pa-control ()
  (interactive)
  (exwm/run-program "pavucontrol"))

(defun takoda/scr-lock ()
  (interactive)
  (exwm/run-program "slock"))
#+END_SRC
** Keybinds
Either key-map system works just pick one.
M = ALT, s = Windows key.
#+BEGIN_SRC elisp
(global-set-key (kbd "M-s-b") 'takoda/launch-browser)
(global-set-key (kbd "M-s-g") 'takoda/launch-games)
(map! "M-s-p" #'takoda/launch-pa-control)
(global-set-key (kbd "s-C-x") 'takoda/scr-lock)
#+END_SRC
** System Tray
#+BEGIN_SRC elisp
(require 'exwm-systemtray)
(exwm-systemtray-enable)
#+END_SRC
** Make exwm usable in doom
in programs this will make it emacs-state and all emacs-state keys will work. Use M-SPC instead of SPC for doom keys.
#+BEGIN_SRC elisp
(push ?\M-\  exwm-input-prefix-keys)
(evil-set-initial-state 'exwm-mode 'emacs)
(setq persp-init-frame-behaviour nil)
#+END_SRC
*** exwm-mode keys
Moving =C-c KEY= to =M-SPC m KEY= for evil users.
#+BEGIN_SRC elisp
(map! :prefix doom-localleader-alt-key
      :e "f" #'exwm-layout-set-fullscreen
      :e "RET" #'exwm-workspace-move-window
      :e "t RET" #'exwm-layout-toggle-mode-line
      :e "t f" #'exwm-floating-toggle-floating)
#+END_SRC
** autorun programs
use the exwm/run-program func to here to autostart programs
#+BEGIN_SRC elisp
(exwm/run-program "gis-weather")
;;(exwm/run-program "another-program")
#+END_SRC
** randr
Run this command.
#+BEGIN_SRC bash
xrandr
#+END_SRC
The output should look like this,

Screen 0: minimum 320 x 200, current 1366 x 768, maximum 16384 x 16384
HDMI-1 connected primary 1366x768+0+0 (normal left inverted right x axis y axis) 1150mm x 650mm
   1366x768      59.79*+
   1920x1080     60.00    50.00    59.94    30.00    25.00    24.00    29.97    23.98
   1280x1024     60.02
   1280x960      60.00
   1360x768      60.02
   1280x800      59.97    59.81    59.91
   1280x720      60.00    59.99    59.86    60.96    60.00    50.00    59.94    59.74
   1440x576      50.00
   1024x768      60.04    70.07    60.00
   960x720       60.00
   1440x480      60.00    59.94
   928x696       60.05
   896x672       60.01
   1024x576      59.95    59.96    59.90    59.82
   960x600       59.93    60.00
   960x540       59.96    59.99    59.63    59.82
   800x600       70.00    65.00    60.00    60.32    56.25
   840x525       60.01    59.88
   864x486       59.92    59.57
   720x576       50.00
   700x525       59.98
   800x450       59.95    59.82
   720x480       60.00    59.94
   640x512       60.02
   700x450       59.96    59.88
   640x480       60.00    60.00    59.94
   720x405       59.51    58.99
   720x400       70.08
   684x384       59.88    59.85
   640x400       59.88    59.98
   640x360       59.86    59.83    59.84    59.32
   512x384       70.07    60.00
   512x288       60.00    59.92
   480x270       59.63    59.82
   400x300       60.32    56.34
   432x243       59.92    59.57
   320x240       60.05
   360x202       59.51    59.13
   320x180       59.84    59.32
DVI-D-1 disconnected (normal left inverted right x axis y axis)
DP-1 disconnected (normal left inverted right x axis y axis)

then, choose the display above the res outputs in my case HDMI-A-0
and replace my case with yours. as well as the res you want.
#+BEGIN_SRC elisp
(require 'exwm-randr)
(setq exwm-randr-workspace-output-plist '(0 "HDMI-A-0"))
(add-hook 'exwm-randr-screen-change-hook
          (lambda ()
            (start-process-shell-command
             "xrandr" nil "xrandr --output HDMI-A-0 --mode 1360x768 --pos 0x0 --rotate normal ")))
(exwm-randr-enable)
#+END_SRC
